# This code is licensed under the terms of the MIT license.

## Golden config for golangci-lint v1.50.1
#
# This is the best config for golangci-lint based on my experience and opinion.
# It is very strict, but not extremely strict.
# Feel free to adopt and change it for your needs.


# This file contains only configs which differ from defaults.
# All possible options can be found here https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml

# https://fossies.org/linux/istio/common/config/.golangci.yml
# https://github.com/golangci/golangci-lint/blob/master/.golangci.yml
# https://olegk.dev/go-linters-configuration-the-right-version

# WARNING: DO NOT EDIT, THIS FILE IS PROBABLY A COPY
#
# The original version of this file is located in the https://github.com/istio/common-files repo.
# If you're looking at this file in a different repo and want to make a change, please go to the
# common-files repo, make the change there and check it in. Then come back to this repo and run
# "make update-common".

# service:
#   # When updating this, also update the version stored in docker/build-tools/Dockerfile in the istio/tools repo.
#   golangci-lint-version: 1.54.x # use the fixed version to not introduce new linters unexpectedly

# install:
#.  curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.1.6

version: "2"

run:
  concurrency: 4
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 20m
  build-tags:
    - integ
    - integfuzz
    - integration
    - hzworks
    - cmdrapp
    - azt
  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #     vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # skip-dirs:
  #   - genfiles$
  #   - vendor$
  #   - ref
  #   - playground
  #   - fixtures
  #   - testdata
  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # skip-files:
  #   - ".*\\.pb\\.go"
  #   - ".*\\.gen\\.go"
  #   - ".*\\_string\\.go"
  # issues-exit-code: 1
  # skip-dirs-use-default: false
  # go: '1.19'
linters:
  default: none
  enable:
    - depguard
    - forbidigo
    - gomodguard
    - govet
    - ineffassign
    - staticcheck
    - unconvert
    - unparam
    # - errcheck
    # - exportloopref
    # - gocritic
    # - gofumpt
    # - goimports
    # - revive
    # - gosimple
    # - ineffassign
    # - lll
    # - misspell
    # - stylecheck
    # - typecheck
    # - unused
    # - gci
    # - gosec
  disable:
    - copyloopvar # fixed in go 1.22+
    - depguard # no forbidden imports
    - dogsled # blank identifiers are allowed
    - dupword # duplicate words are allowed
    - exhaustruct # many structs don't need to be exhaustive
    - forbidigo # no forbidden identifiers
    - ginkgolinter # not used
    - gochecknoinits # init functions are fine, if used carefully
    - goconst # many false positives
    - godot # comments don't need to be complete sentences
    - godox # todo comments are allowed
    - goheader # no need for a header
    - gomoddirectives # allow all directives
    - gomodguard # no forbidden imports
    - grouper # unused
    - importas # some aliases are fine
    - makezero # make with non-zero initial length is fine
    - noctx # http request may be sent without context
    - nonamedreturns # named returns are fine
    - testableexamples # examples do not need to be testable (have declared output)
    - testifylint # testify is not recommended
    - testpackage # not a go best practice
    - unparam # interfaces can enforce parameters
    - zerologlint # slog should be used instead of zerolog
    - mnd # too many detections
    - cyclop # covered by gocyclo
    - gochecknoglobals # there are many valid reasons for global variables, depending on the project
    - ireturn # there are too many exceptions
    # - tenv # deprecated
  settings:
    depguard:
      rules:
        main:
          files:
            - $all
          deny:
            - pkg: github.com/gogo/protobuf
              desc: "pure github.com/golang/protobuf is better"
            - pkg: golang.org/x/net/http2/h2c
              desc: "h2c.NewHandler is unsafe; use wrapper istio.io/istio/pkg/h2c"
            - pkg: github.com/golang/protobuf
              desc: 'use "google.golang.org/protobuf"'
            - pkg: github.com/golang/protobuf/jsonpb
              desc: "don't use the jsonpb package directly; use util/protomarshal instead"
            - pkg: google.golang.org/protobuf/encoding/protojson
              desc: "don't use the protojson package directly; use util/protomarshal instead"
            - pkg: gomodules.xyz/jsonpatch/v3
              desc: "don't use v3; v2 is orders of magnitude higher performance"
            - pkg: k8s.io/apimachinery/pkg/util/sets
              desc: "use istio.io/istio/pkg/sets"
            - pkg: k8s.io/utils/env
              desc: "use istio.io/istio/pkg/env"
            - pkg: k8s.io/utils/strings/slices
              desc: "use istio.io/istio/pkg/slices"
            - pkg: k8s.io/utils/pointer
              desc: "use istio.io/istio/pkg/ptr"
            - pkg: go.opencensus.io
              desc: "do not use OpenCensus; use OpenTelemetry instead"
            - pkg: github.com/siddontang/go-log/log
              desc: 'use "github.com/sirupsen/logrus" instead'
            - pkg: github.com/siddontang/go/log
              desc: 'use "github.com/sirupsen/logrus" instead'
            - pkg: go.uber.org/atomic
              desc: 'use "sync/atomic" instead'
            - pkg: io/ioutil
              desc: 'use "io" or "os" packages instead'
          allow:
            - $gostd
            - github.com/golang/protobuf
            - github.com/BurntSushi/toml
            - golang.org/x/sys/unix
            - golang.org/x/exp/maps
            - golang.org/x/text/cases
            - golang.org/x/text/language
            - gopkg.in/yaml.v2
            - github.com/Masterminds/sprig/v3
            - github.com/davecgh/go-spew/spew
            - github.com/hashicorp/consul-template
            - github.com/hashicorp/consul/api
            - github.com/hashicorp/consul/sdk/testutil
            - github.com/hashicorp/go-gatedio
            - github.com/hashicorp/go-hclog
            - github.com/hashicorp/go-multierror
            - github.com/hashicorp/go-rootcerts
            - github.com/hashicorp/go-sockaddr/template
            - github.com/hashicorp/go-syslog
            - github.com/hashicorp/hcl
            - github.com/hashicorp/logutils
            - github.com/hashicorp/nomad/api
            - github.com/hashicorp/vault/api
            - dario.cat/mergo
            - github.com/mitchellh/go-homedir
            - github.com/mitchellh/hashstructure
            - github.com/mitchellh/mapstructure
            - github.com/pkg/errors
            - github.com/ryanuber/go-glob
            - github.com/stretchr/testify/assert
            - github.com/stretchr/testify/require
            - github.com/coreos/go-systemd
    forbidigo:
      forbid:
        - pattern: \bioutil\b(# Use io and os packages instead of ioutil)?
        - pattern: \brequire\.New\b(# Use package-level functions with explicit TestingT)?
        - pattern: \bassert\.New\b(# Use package-level functions with explicit TestingT)?
    gomodguard:
      blocked:
        modules:
          - github.com/hashicorp/go-msgpack:
              recommendations:
                - github.com/hashicorp/consul-net-rpc/go-msgpack
          - github.com/golang/protobuf:
              recommendations:
                - google.golang.org/protobuf
    govet:
      disable:
        - fieldalignment
        - nilness
        - unusedwrite
      enable-all: true
      settings:
        printf:
          funcs:
            - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
            - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
            - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
            - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
            - (github.com/hedzr/store).assertTrue
            - (github.com/hedzr/store).assertFalse
            - (github.com/hedzr/cmdr/pkg/logz).Infof
            - (github.com/hedzr/cmdr/pkg/logz).Warnf
            - (github.com/hedzr/cmdr/pkg/logz).Errorf
            - (github.com/hedzr/cmdr/pkg/logz).Fatalf

    dupword: # checks for duplicate words in the source code [fast: true, auto-fix: true]
      # auto-fix: false
      # Keywords for detecting duplicate words.
      # If this list is not empty, only the words defined in this list will be detected.
      # Default: []
      keywords:
        - "the"
        - "and"
        - "a"
      # Keywords used to ignore detection.
      # Default: []
      ignore:
        - "0C0C"

    unparam:
      # https://golangci-lint.run/usage/linters/#unparam
      # call graph construction algorithm (cha, rta). In general, use cha for libraries,
      # and rta for programs with main packages. Default is cha.
      # algo: cha
      # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
      # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
      # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
      # with golangci-lint call it on a directory with the changed file.
      check-exported: false

    funlen:
      # lines: -1 # the number of lines (code + empty lines) is not a right metric and leads to code without empty line or one-liner.
      lines: 100
      statements: 50
      ignore-comments: true

    gocyclo:
      min-complexity: 25

    #gofmt:
    #  # auto-fix: true
    #  rewrite-rules:
    #    - pattern: 'interface{}'
    #      replacement: 'any'
    #gofumpt:
    #  # Deprecated: use the global `run.go` instead.
    #  lang-version: "1.17"
    #  # Module path which contains the source code being formatted.
    #  # Default: ""
    #  module-path: github.com/org/project
    #  # Choose whether to use the extra rules.
    #  # Default: false
    #  extra-rules: true
    #  # auto-fix: true
    #golint:
    #  min-confidence: 0

    lll:
      # max line length, lines longer will be reported. Default is 120.
      # '\t' is counted as 1 character by default, and can be changed with the tab-width option
      line-length: 160
      # tab width in spaces. Default to 1.
      tab-width: 1
    misspell:
      # Correct spellings using locale preferences for US or UK.
      # Default is to use a neutral variety of English.
      # Setting locale to US will correct the British spelling of 'colour' to 'color'.
      locale: US
      # fast: true
      # auto-fix: false
      # extra-words:
      #   - cancelled
      #   - hedzr

    unused:
      # https://golangci-lint.run/usage/linters/#unused
      # treat code as a program (not a library) and report unused exported identifiers; default is false.
      # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
      # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
      # with golangci-lint call it on a directory with the changed file.
      # check-exported: false

      # Mark all struct fields that have been written to as used.
      # Default: true
      field-writes-are-uses: true

      # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
      # Default: false
      post-statements-are-reads: false

      # Mark all exported identifiers as used.
      # Default: true
      # exported-is-used: false

      # Mark all exported fields as used.
      # default: true
      # exported-fields-are-used: false

      # Mark all function parameters as used.
      # default: true
      # parameters-are-used: false

      # Mark all local variables as used.
      # default: true
      # local-variables-are-used: false

      # Mark all identifiers inside generated files as used.
      # Default: true
      # generated-is-used: false

    varnamelen:
      ignore-type-assert-ok: true # ignore "ok" variables
      ignore-map-index-ok: true
      ignore-chan-recv-ok: true
      ignore-decls:
        - n int # generic number
        - x int # generic number (e.g. coordinate)
        - y int # generic number (e.g. coordinate)
        - z int # generic number (e.g. coordinate)
        - i int # generic number
        - a int # generic number
        - r int # generic number (e.g. red or radius)
        - g int # generic number (e.g. green)
        - b int # generic number (e.g. blue)
        - r int64 # generic number (e.g. red or radius)
        - g int64 # generic number (e.g. green)
        - b int64 # generic number (e.g. blue)
        - c int # generic number (e.g. count)
        - j int # generic number (e.g. index)
        - T any # generic type
        - a any # generic any (e.g. data)
        - b any # generic any (e.g. body)
        - c any # generic any
        - d any # generic any (e.g. data)
        - data any # generic data
        - n any # generic any
        - ch chan T # common generic channel name
        - ch chan int # common generic channel name
        - ch chan any # common generic channel name
        - wg sync.WaitGroup # common generic WaitGroup name
        - t time.Time # often used as a variable name
        - f func() # often used as a callback variable name
        - f func(T) # often used as a generic callback variable name
        - cb func() # often used as a callback variable name
        - t testing.T # default testing.T variable name
        - b testing.B # default testing.B variable name
        - sb strings.Builder # often used as a variable name

    whitespace:
      # Enforces newlines (or comments) after every multi-line if statement.
      # Default: false
      multi-if: false
      # Enforces newlines (or comments) after every multi-line function signature.
      # Default: false
      multi-func: false
      # auto-fix: true

    wsl:
      allow-cuddle-declarations: true
      force-err-cuddling: true
      force-case-trailing-whitespace: 3

  exclusions:
    generated: lax
    rules:
      - linters:
          - govet
        text: 'shadow: declaration of "(err|ctx)" shadows declaration at'
formatters:
  enable:
    - gofmt
  settings:
    gofmt:
      simplify: true
  exclusions:
    generated: lax

